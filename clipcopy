Block(
    Block {
        branch: Program,
        items: [
            Stmt(
                Asn(
                    Var(
                        Var {
                            key: "sensor",
                            fixed: false,
                        },
                    ),
                    Dev(
                        Lit(
                            0,
                        ),
                    ),
                ),
                None,
            ),
            Stmt(
                Asn(
                    Var(
                        Var {
                            key: "offsetDial",
                            fixed: false,
                        },
                    ),
                    Dev(
                        Lit(
                            1,
                        ),
                    ),
                ),
                None,
            ),
            Stmt(
                Empty,
                None,
            ),
            Stmt(
                Asn(
                    Def(
                        "panelHash",
                    ),
                    Expr(
                        Num(
                            Lit(
                                123.0,
                            ),
                        ),
                    ),
                ),
                None,
            ),
            Stmt(
                Empty,
                None,
            ),
            Block(
                Block {
                    branch: Loop,
                    items: [
                        Stmt(
                            Mips(
                                Yield(
                                    [],
                                ),
                            ),
                            None,
                        ),
                        Stmt(
                            Asn(
                                NetParam {
                                    hash: Var(
                                        Var {
                                            key: "panelHash",
                                            fixed: false,
                                        },
                                    ),
                                    param: "Horizontal",
                                },
                                Expr(
                                    Binary {
                                        op: Add,
                                        lhs: DevParam {
                                            dev: Var(
                                                Var {
                                                    key: "sensor",
                                                    fixed: false,
                                                },
                                            ),
                                            param: "Horizontal",
                                        },
                                        rhs: Expr(
                                            Binary {
                                                op: Mul,
                                                lhs: DevParam {
                                                    dev: Var(
                                                        Var {
                                                            key: "offsetDial",
                                                            fixed: false,
                                                        },
                                                    ),
                                                    param: "Setting",
                                                },
                                                rhs: Lit(
                                                    90.0,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            ),
                            None,
                        ),
                        Stmt(
                            Asn(
                                NetParam {
                                    hash: Var(
                                        Var {
                                            key: "panelHash",
                                            fixed: false,
                                        },
                                    ),
                                    param: "Vertical",
                                },
                                Expr(
                                    Binary {
                                        op: Div,
                                        lhs: Expr(
                                            Binary {
                                                op: Sub,
                                                lhs: Lit(
                                                    75.0,
                                                ),
                                                rhs: DevParam {
                                                    dev: Var(
                                                        Var {
                                                            key: "sensor",
                                                            fixed: false,
                                                        },
                                                    ),
                                                    param: "Vertical",
                                                },
                                            },
                                        ),
                                        rhs: Lit(
                                            1.5,
                                        ),
                                    },
                                ),
                            ),
                            None,
                        ),
                    ],
                },
                None,
            ),
        ],
    },
    None,
)
 0: alias sensor d0
 1: alias offsetDial d1
 2: 
 3: 
 4: yield
 5: l r1 d0 Horizontal
 6: l r3 d1 Setting
 7: mul r2 r3 90
 8: add r0 r1 r2
 9: sb 123 Horizontal r0
10: l r6 d0 Vertical
11: sub r5 75 r6
12: div r4 r5 1.5
13: sb 123 Vertical r4
14: jr -10
================================================================================
 0: Line { stmt: Alias([String("sensor"), Dev(Base(Lit(DevLit { index: 0, indirections: 0 })))]), comment_opt: None }
 1: Line { stmt: Alias([String("offsetDial"), Dev(Base(Lit(DevLit { index: 1, indirections: 0 })))]), comment_opt: None }
 2: Line { stmt: Empty([]), comment_opt: None }
 3: Line { stmt: Empty([]), comment_opt: None }
 4: Line { stmt: Yield([]), comment_opt: None }
 5: Line { stmt: L([Reg(Base(Lit(RegLit { index: 1, indirections: 0, fix_mode: None }))), Dev(Base(Lit(DevLit { index: 0, indirections: 0 }))), String("Horizontal")]), comment_opt: None }
 6: Line { stmt: L([Reg(Base(Lit(RegLit { index: 3, indirections: 0, fix_mode: None }))), Dev(Base(Lit(DevLit { index: 1, indirections: 0 }))), String("Setting")]), comment_opt: None }
 7: Line { stmt: Mul([Reg(Base(Lit(RegLit { index: 2, indirections: 0, fix_mode: None }))), Num(Reg(Lit(RegLit { index: 3, indirections: 0, fix_mode: None }))), Num(Lit(90.0))]), comment_opt: None }
 8: Line { stmt: Add([Reg(Base(Lit(RegLit { index: 0, indirections: 0, fix_mode: None }))), Num(Reg(Lit(RegLit { index: 1, indirections: 0, fix_mode: None }))), Num(Reg(Lit(RegLit { index: 2, indirections: 0, fix_mode: None })))]), comment_opt: None }
 9: Line { stmt: Sb([Num(Lit(123.0)), String("Horizontal"), Num(Reg(Lit(RegLit { index: 0, indirections: 0, fix_mode: None })))]), comment_opt: None }
10: Line { stmt: L([Reg(Base(Lit(RegLit { index: 6, indirections: 0, fix_mode: None }))), Dev(Base(Lit(DevLit { index: 0, indirections: 0 }))), String("Vertical")]), comment_opt: None }
11: Line { stmt: Sub([Reg(Base(Lit(RegLit { index: 5, indirections: 0, fix_mode: None }))), Num(Lit(75.0)), Num(Reg(Lit(RegLit { index: 6, indirections: 0, fix_mode: None })))]), comment_opt: None }
12: Line { stmt: Div([Reg(Base(Lit(RegLit { index: 4, indirections: 0, fix_mode: None }))), Num(Reg(Lit(RegLit { index: 5, indirections: 0, fix_mode: None }))), Num(Lit(1.5))]), comment_opt: None }
13: Line { stmt: Sb([Num(Lit(123.0)), String("Vertical"), Num(Reg(Lit(RegLit { index: 4, indirections: 0, fix_mode: None })))]), comment_opt: None }
14: Line { stmt: Jr([LineRel(LineRel(Lit(-10.0)))]), comment_opt: None }
--------------------------------------------------------------------------------
 0: alias sensor d0
 1: alias offsetDial d1
 2: 
 3: 
 4: yield
 5: l r1 d0 Horizontal
 6: l r3 d1 Setting
 7: mul r2 r3 90
 8: add r0 r1 r2
 9: sb 123 Horizontal r0
10: l r6 d0 Vertical
11: sub r5 75 r6
12: div r4 r5 1.5
13: sb 123 Vertical r4
14: jr -10
LIFETIMES:
          0                  10        
  0  r0 : | | | | | | | | 8-9 | | | | |
  1  r1 : | | | | | 5-----8 | | | | | |
  2  r2 : | | | | | | | 7-8 | | | | | |
  3  r3 : | | | | | | 6-7 | | | | | | |
  4  r4 : | | | | | | | | | | | | 2-3 |
  5  r5 : | | | | | | | | | | | 1-2 | |
  6  r6 : | | | | | | | | | | 0-1 | | |

================================================================================
OPTIMIZE
 0: Line { stmt: Yield([]), comment_opt: None }
 1: Line { stmt: L([Reg(Base(Lit(RegLit { index: 0, indirections: 0, fix_mode: None }))), Dev(Base(Lit(DevLit { index: 0, indirections: 0 }))), String("Horizontal")]), comment_opt: None }
 2: Line { stmt: L([Reg(Base(Lit(RegLit { index: 1, indirections: 0, fix_mode: None }))), Dev(Base(Lit(DevLit { index: 1, indirections: 0 }))), String("Setting")]), comment_opt: None }
 3: Line { stmt: Mul([Reg(Base(Lit(RegLit { index: 1, indirections: 0, fix_mode: None }))), Num(Reg(Lit(RegLit { index: 1, indirections: 0, fix_mode: None }))), Num(Lit(90.0))]), comment_opt: None }
 4: Line { stmt: Add([Reg(Base(Lit(RegLit { index: 0, indirections: 0, fix_mode: None }))), Num(Reg(Lit(RegLit { index: 0, indirections: 0, fix_mode: None }))), Num(Reg(Lit(RegLit { index: 1, indirections: 0, fix_mode: None })))]), comment_opt: None }
 5: Line { stmt: Sb([Num(Lit(123.0)), String("Horizontal"), Num(Reg(Lit(RegLit { index: 0, indirections: 0, fix_mode: None })))]), comment_opt: None }
 6: Line { stmt: L([Reg(Base(Lit(RegLit { index: 0, indirections: 0, fix_mode: None }))), Dev(Base(Lit(DevLit { index: 0, indirections: 0 }))), String("Vertical")]), comment_opt: None }
 7: Line { stmt: Sub([Reg(Base(Lit(RegLit { index: 0, indirections: 0, fix_mode: None }))), Num(Lit(75.0)), Num(Reg(Lit(RegLit { index: 0, indirections: 0, fix_mode: None })))]), comment_opt: None }
 8: Line { stmt: Div([Reg(Base(Lit(RegLit { index: 0, indirections: 0, fix_mode: None }))), Num(Reg(Lit(RegLit { index: 0, indirections: 0, fix_mode: None }))), Num(Lit(1.5))]), comment_opt: None }
 9: Line { stmt: Sb([Num(Lit(123.0)), String("Vertical"), Num(Reg(Lit(RegLit { index: 0, indirections: 0, fix_mode: None })))]), comment_opt: None }
10: Line { stmt: Jr([LineRel(LineRel(Lit(-10.0)))]), comment_opt: None }
--------------------------------------------------------------------------------
 0: yield
 1: l r0 d0 Horizontal
 2: l r1 d1 Setting
 3: mul r1 r1 90
 4: add r0 r0 r1
 5: sb 123 Horizontal r0
 6: l r0 d0 Vertical
 7: sub r0 75 r0
 8: div r0 r0 1.5
 9: sb 123 Vertical r0
10: jr -10
