# Precision single-gas driven furnace controller
# (nilsso)
#
# NOTE: To start operation, write a "value" greater than zero to the housing. This value is taken to
# be a code for the target temperature and pressure with the format `PPPTTT`, where tT=TTT*10$ and
# pT=PPP*100.
#
# e.g. 500050 -> tT = 050*10 = 500 K, pT = 500*100 = 50,000 kPa = 50 MPa
#
# IMPORTANT: Validation for this input is not done here, and the program will attempt to use
# whatever it is given. If the target temperature is less-than the cold source temperature or
# greater than the hot source temperature then wackiness will certainly occurr!
# (I may change this point in the future)
furnace   = d0
tankC     = d1
tankH     = d2
pumpC     = d3
pumpH     = d4
analyzerI = d5

# Constants
def vF = 1000             # Furnace volume
def R  = 8.31446261815324 # Universal gas consant
def dt = 0.5              # Time step

# Source volume-mole factor
# (NOTE: ADJUST PER SETUP)
# e.g. 6200 = 1 furnace (6000) + 2 pipes (200) L
# (TODO: Need to implement defines calculated from other defines)
def vC = 50100
def vH = 50100
def fC = (50100) / 50000
def fH = (50100) / 50000

# "PD" term coefficients
# (NOTE: Tweaking could increase result speed)
def KPF = 0.5 # Furnace volume proportional term
def KDF = 0.5 # Furnace volume derivative term
def KPC = 0.5 # Cold source proportional term
def KDC = 0.5 # Cold source derivative term
def KPH = 0.5 # Hot source proportional term
def KDH = 0.5 # Hot source derivative term

# Error bounds
# (TODO: Are these even needed anymore? Seems precise beyond error bounds)
def ERRORF = 0 # Error on initial furnace gas removal
def ERRORC = 0 # Error on cold source transfer
def ERRORH = 0 # Error on hot source transfer

# Pump maximum bounds
# (NOTE: These are optionally used down the PD loop)
def rFmax = 1000 # Furnace output
def rCmax = 1000 # Cold source pump
def rHmax = 1000 # Hot source pump

# Initialization
db.Setting = -1
furnace.SettingInput = 0
furnace.SettingOutput = 0

# Global scope the important things
fix NF, NC, NH, eTotal0, eFp, eCp, eHp
loop:
    yield()
    input = db.Setting
    if input <= 0:
        db.Setting = -1
    else:
        db.Setting = 0

        # Unpack input target temperature and pressure (tT/pT)
        input = trunc(input)
        tT = (input % 1000) * 10
        pT = trunc(input / 1000) * 100

        # Target number of moles for the given targets (nT)
        nT = (pT * vF) / (R * tT)

        # C bound on moles to remove (nRC)
        tF  = furnace.Temperature
        tH  = tankH.Temperature
        nRC = (tT - tH) / (tH - tF)

        # H bound on moles to remove (nRH)
        tC  = tankC.Temperature
        nRH = (tT - tC) / (tC - tF)

        # Moles to remove from F (nR)
        nF0 = furnace.TotalMoles
        nR  = max(0, nT * max(nRC, nRH) + nF0)

        # F end goal (NF) and initial error (eFp)
        NF  = nF0 - nR
        eFp = nF0 - NF

        # Total moles and temperature of input (nI/tI)
        nI = nT - nF0 + nR
        tI = (tT * nT - tF * NF) / nI

        # C moles of input (nCI)
        nCI = max(0, nI * (tI - tH) / (tC - tH))

        # C end goal (NC) and initial error (eCp)
        nC0 = fC * tankC.TotalMoles
        NC  = nC0 - nCI
        eCp = nC0 - NC

        # H moles of input (nHI)
        nHI = nI - nCI

        # H end goal (NH) and initial error (eHp)
        nH0 = fH * tankH.TotalMoles
        NH  = nH0 - nHI
        eHp = nH0 - NH

        # Total initial error
        eTotal0 = eFp + eCp + eHp

        tag MolesLoop:
            yield()

            # F output rate
            nF = furnace.TotalMoles
            eF = nF - NF
            EF = eF > ERRORF
            rF = KPF*(eF * vF / nF) + KDF*(eF - eFp)/dt
            #rF = max(0, min(rFmax, rF)) # optional bound on rate
            furnace.SettingOutput = rF

            # C input rate
            nC = fC * tankC.TotalMoles
            eC = nC - NC
            EC = eC > ERRORC
            rC = KPC*(eC * vC / nC) + KDC*(eC - eCp)/dt
            #rC = max(0, min(100, rC)) # optional bound on rate
            pumpC.Setting = rC
            pumpC.On      = EC

            # H input rate
            nH = fH * tankH.TotalMoles
            eH = nH - NH
            EH = eH > ERRORH
            rH = KPH*(eH * vH / nH) + KDH*(eH - eHp)/dt
            #rH = max(0, min(100, rH)) # optional bound on rate
            pumpH.Setting = rH
            pumpH.On      = EH

            # Write progress to housing and store errors
            # (TODO: This isn't exactly accurate...)
            eTotal = eF + eC + eH
            db.Setting = 1 - (eTotal / eTotal0)
            eFp = eF
            eCp = eC
            eHp = eH

            bnez(EF, MolesLoop)
            bnez(EC, MolesLoop)
            bnez(EH, MolesLoop)

        furnace.SettingOutput = 0
        pumpC.On = 0
        pumpH.On = 0
        yield()

        # Dump the input mixture into the furnace
        furnace.SettingInput = 1000
        while analyzerI.TotalMoles > 0:
            yield()
        furnace.SettingInput = 0

        # Done!
        db.Setting = -1
