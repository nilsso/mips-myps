# Precision single-gas driven furnace controller
# (nilsso)
#
# NOTE: To start operation, write a "value" greater than zero to the housing. This value is taken to
# be a code for the target temperature and pressure with the format `PPPTTT`, where tT=TTT*10$ and
# pT=PPP*100.
#
# e.g. 500050 -> tT = 050*10 = 500 K, pT = 500*100 = 50,000 kPa = 50 MPa
#
# IMPORTANT: Validation for this input is not done here, and the program will attempt to use
# whatever it is given. If the target temperature is less-than the cold source temperature or
# greater than the hot source temperature then wackiness will certainly occurr!
# (I may change this point in the future)
furnace   = d0
tankC     = d1
tankH     = d2
pumpC     = d3
pumpH     = d4
analyzerI = d5

# Constants
def vF = 1000             # Furnace volume
def R  = 8.31446261815324 # Universal gas consant
def dt = 0.5              # Time step

# Source volume-mole factor
# (NOTE: ADJUST PER SETUP)
# e.g. 6200 = 1 furnace (6000) + 2 pipes (200) L
# (TODO: Need to implement defines calculated from other defines)
def vC = 50100
def vH = 50100
def fC = (50100) / 50000
def fH = (50100) / 50000

# "PD" term coefficients
# (NOTE: Tweaking could increase result speed)
def KPF = 0.5 # Furnace volume proportional term
def KDF = 0.5 # Furnace volume derivative term
def KPC = 0.5 # Cold source proportional term
def KDC = 0.5 # Cold source derivative term
def KPH = 0.5 # Hot source proportional term
def KDH = 0.5 # Hot source derivative term

# Error bounds
def ERRORN = 2
def ERRORF = 5 # Error on initial furnace gas removal
def ERRORC = 5 # Error on cold source transfer
def ERRORH = 5 # Error on hot source transfer

# Pump maximum bounds
# (NOTE: These are optionally used down the PD loop)
def rFmax = 100 # Furnace output
def rCmax = 100 # Cold source pump
def rHmax = 100 # Hot source pump

# Initialization
db.Setting = -1

pumpC.On = 1
pumpH.On = 1
pumpC.Setting = 0
pumpH.Setting = 0

loop:
    #if analyzerI.TotalMoles > 0:
    #    furnace.SettingInput = 1000
    #    yield()
    #    furnace.SettingInput = 0
    #yield()
    input = db.Setting
    if input <= 0:
        db.Setting = -1
        furnace.SettingOutput = 0
        pumpC.Setting = 0
        pumpH.Setting = 0
    else:
        furnace.SettingInput = 0
        input = trunc(input)
        tT  = (input % 1000) * 10
        tF  = furnace.Temperature

        #if abs(tT - tF) > ERRORN:
        tC  = tankC.Temperature
        tH  = tankH.Temperature
        nRC = (tT - tH) / (tH - tF)
        #nRC = (tH - tF > ERRORN) ? ((tT - tH) / (tH - tF)) : 0
        nRH = (tC - tT) / (tF - tC)
        #nRH = (tF - tC > ERRORN) ? ((tC - tT) / (tF - tC)) : 0
        fix nF = furnace.TotalMoles
        pT  = trunc(input / 1000) * 100
        nT  = (pT * vF) / (R * tT)
        nR  = max(0, nT * max(nRC, nRH) + nF)
        nI  = nT - nF + nR
        tI  = (tT * nT - tF * (nF - nR)) / nI
        nCI = max(0, nI * (tI - tH) / (tC - tH))
        nHI = nI - nCI

        #for i in (0:round(nF/2000)):
        rF = nR * vF / nF * dt
        rF = max(0, min(rFmax, rF))
        furnace.SettingOutput = rF
        #nF = furnace.TotalMoles
        yield()
        furnace.SettingOutput = 0

        #for i in (0:round(nCI/2000)):
        nC  = fC * tankC.TotalMoles
        rC = nCI * vC / nC
        rC = max(0, min(rCmax, rC))
        pumpC.Setting = rC

        #for i in (0:round(nHI/2000)):
        nH  = fH * tankH.TotalMoles
        rH = nHI * vH / nH
        rH = max(0, min(rHmax, rH))
        pumpH.Setting = rH

        # TODO: Add delta-temp check, to see if should loop and wait HERE
        # to change the temp as quickly as possible if a large difference

        yield()
        #furnace.SettingOutput = 0
        pumpC.Setting = 0
        pumpH.Setting = 0
    #db.Setting = input
