furnace = d0
tankC   = d1
tankH   = d2
nCPump  = d3
nHPump  = d4
nIAnlzr = d5

def vF = 1000  # furnace volume
def R  = 8.314 # universal gas consant
def dt = 0.5   # time step

# Source volume-mole factor (adjust per setup)
# e.g. 6100  = 1 furnace (6000) + 1 pipe (100) L
def vCFactor = (6100) / 6000
def vHFactor = (6100) / 6000

# PD coefficients and minimum error (perhaps adjust)
def kPF = 0.06
def kDF = 0.02
def kPC = 0.06
def kDC = 0.02
def kPH = 0.06
def kDH = 0.02
def ERRORF = 0.03
def ERRORC = 0.03
def ERRORH = 0.03

# Input target temperature/pressure format: PPPTTT
# ```
# input = db.Setting
# tT    = input % 1000 * 10 K
# input = trunc(input / 1000)
# pT    = input * 100 kPa
# ```
# e.g. 500050 -> tT = 50*10 = 500 K, pT = 500*100 = 50,000 kPa
loop:
    input = db.Setting
    if input < 0:
        db.Setting = 0
    elif input > 0:
        # (a) unpack input temperature and pressure
        input = trunc(input)
        tT = (input % 1000) * 10
        pT = trunc(input / 1000) * 100

        # (b) batch read temperature and pressure from furnace (tF/pF)
        nF = furnace.TotalMoles
        tF = furnace.Temperature

        # (c) read tank temperatures
        tC = tankC.Temperature
        tH = tankH.Temperature

        # (d) calculate moles to remove and add from C and H (nR/nC/nH)
        fix rF, rC, rH
        tag calcMolesTargets:
            nT = pT * vF / (R * tT)
            nRC = nT * (tT - tH) / (tH - tF) + nF
            nRH = nT * (tT - tC) / (tC - tF) + nF
            nR = max(0, min(nRC, nRH))
            nI = nT - nF + nR
            tI = (tT * nT - tF * (nF - nR)) / nI
            nHI = nI * (tC - tI) / (tC - tH)
            nCI = nI - nHI # nCI

            nC = vCFactor * tankC.TotalMoles # calc C moles
            nH = vHFactor * tankH.TotalMoles # calc H moles

            rF = nF - nR # calc F target (rF)
            rC = nC - nCI # calc C target (rC
            rH = nH - nHI # calc H target (rH)

        # (e) remove nR, mix nC and nH
        yield()
        nCPump.On = 1
        nCPump.Setting = 0
        nHPump.On = 1
        nHPump.Setting = 0

        # (f) remove nR, mix nC and nH
        tag E:
            fix eF = nF - rF # fix F error (nF - rF)
            fix eC = nC - rC # fix C error (nC - rC)
            fix eH = nH - rH # fix H error (nH - rH)
            fix eFPrev = 0 # fix F error (prev)
            fix eCPrev = 0 # fix C error (prev)
            fix eHPrev = 0 # fix H error (prev)
            # triple PD loop! controls reaching rF/C/H moles in F/C/H
            # if rF is reached, start inputting the nI mixture in advance to (f)
            tag PDLoop:
                if eF > ERRORF:
                    uF = (kPF * eF) + (kDF * (eF - eFPrev) / dt)
                    furnace.SettingOutput = uF
                    eFPrev = eF
                else:
                    furnace.SettingOutput = 0
                    furnace.SettingInput = 100

                if eC > ERRORC:
                    uC = (kPC * eC) + (kDC * (eC - eCPrev) / dt)
                    nCPump.Setting = uC # set C pump
                    eCPrev = eC

                if eH > ERRORH:
                    uH = (kPH * eH) + (kDH * (eH - eHPrev) / dt)
                    nHPump.Setting = uH # set H pump
                    eHPrev = eH

                # check feedback and calculate new error
                yield()
                if eF > ERRORF:
                    nF = furnace.TotalMoles
                    eF = nF - rF

                if eC > ERRORC:
                    nC = vCFactor * tankC.TotalMoles
                    eC = nC - rC

                if eH > ERRORH:
                    nH = vHFactor * tankH.TotalMoles
                    eH = nH - rH

                bgt(eF, ERRORF, PDLoop)
                bgt(eC, ERRORC, PDLoop)
                bgt(eH, ERRORH, PDLoop)
        nCPump.On = 0
        nHPump.On = 0

        # (g) input the nC and nH gas
        furnace.SettingInput = 100
        while furnace.TotalMoles > 0:
            yield()
        furnace.SettingInput = 0

        # (?) enjoy
        db.Setting = 0