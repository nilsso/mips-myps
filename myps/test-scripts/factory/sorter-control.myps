sorter = d0
selfMem = d1
downMem = d2
upMem = db
# selfReq, downReq, upReq, updateUpReq = r0, r1, r2, r3
fix selfReq, downReq, upReq, updateUpReq

loop: # loop
    yield()
    tag updateSelfRequest: # updateSelfRequest:
        selfReqCurr = selfMem.Setting # selfReqCurr = selfMem.Setting
        if selfReqCurr != selfReq: # if selfReqCurr != selfReq:
            selfReq = selfReqCurr # selfReq = selfReqCurr
            updateUpReq = 1 # updateUpReq = 1
    # (end updateSelfRequest)
    tag updateDownRequest: # updateDownRequest:
        if dse(downMem): # if dse(downMem):
            downReqCurr = downMem.Setting # downReqCurr = downMem.Setting
            if downReqCurr != downReq: # if downReqCurr != downREq:
                downReq = downReqCurr # downReq = downReqCurr
                updateUpReq = 1 # updateUpReq = 1
    # (end updateDownRequest)
    tag orRequests: # orRequests:
        if updateUpReq: # if updateUpReq:
            if downReq == 0: # if downReq == 0:
                upReq = selfReq # upReq = selfReq
            elif selfReq == 0: # elif selfReq == 0:
                upReq = downReq # upReq = downReq
            else: # else:
                fix orWord = 0 # fix orWord = 0
                fix selfWord = selfReq # fix selfWord = selfReq
                fix downWord = downReq # fix downWord = downReq
                while selfWord > 0 or downWord > 0: # while selfWord > 0 or downWord > 0:
                    orWord = (2 * orWord) + (selfWord % 2 or downWord % 2) # orWord = (2 * orWord) + (selfWord % 2 or downWord % 2)
                    selfWord = trunc(selfWord / 2) # selfWord = trunc(selfWord / 2)
                    downWord = trunc(downWord / 2) # downWord = trunc(downWord / 2)
                    # (end while)
                upReq = orWord # upReq = orWord
            upMem.Setting = upReq # upMem.Setting = upReq
            updateUpReq = 0 # updateUpReq = 0
    # (end orRequest)
    tag getOccupantBit: # getOccupantBit:
        hash = sorter[0].OccupantHash
        fix i = 1
        beq(hash, -404336834, extractBit) # copper
        i *= 2
        beq(hash, 226410516, extractBit) # gold
        i *= 2
        beq(hash, -1301215609, extractBit) # iron
        i *= 2
        beq(hash, 2134647745, extractBit) # lead
        i *= 2
        beq(hash, -1406385572, extractBit) # nickel
        i *= 2
        beq(hash, -290196476, extractBit) # silicon
        i *= 2
        beq(hash, -929742000, extractBit) # silver
        i *= 2
        beq(hash, 1058547521, extractBit) # constantan
        i *= 2
        beq(hash, 502280180, extractBit) # electrum
        i *= 2
        beq(hash, -297990285, extractBit) #invar
        i *= 2
        beq(hash, -82508479, extractBit) # solder
        i *= 2
        beq(hash, -654790771, extractBit) # steel
        i *= 2
        beq(hash, 412924554, extractBit) # astroloy
        i *= 2
        beq(hash, 1579842814, extractBit) # hastelloy
        i *= 2
        beq(hash, -787796599, extractBit) # inconel
        i *= 2
        beq(hash, -1897868623, extractBit) # stellite
        i *= 2
        beq(hash, 156348098, extractBit) # waspaloy
        i *= 2
        beq(hash, 1724793494, extractBit) # ore (coal)
        i *= 2
        beq(hash, -983091249, extractBit) # ore (cobalt)
        fix output = 1
        j(sort)
    # (end getOccupantBit)
    tag extractBit: # extractBit:
        output = trunc(selfReq / i) % 2 # output = trunc(selfReq / i) % 2
    # (end extractBit)
    tag sort: # sort:
        sorter.Output = output
    # (end sort)
# (end loop)
